#!/usr/bin/ruby -w
#
# Problem 12
# 08 March 2002

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would
# be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?

puts 'unsolved'

require 'primes'

class Integer
  def triangle
    (self * (self + 1)) / 2
  end
end

raise "Bad triangle" unless 7.triangle == 28 && 10.triangle == 55

puts '*** brute force takes way too long (more than 3hrs) ***'; exit

1000.upto(10_000) do |n|
  t = n.triangle
  f = Prime.factorize(n.triangle)
  next unless f.size >= 7
  d = []
  1.upto(t) {|x| d << x if t%x==0}
  next unless d.size > 500
  puts "%3d => %5d: %s"%[n, t, f.inspect ]
  puts "   %3d   %s"%[d.size, d.inspect]
  exit
end
